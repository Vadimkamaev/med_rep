import random

# llm_analyzer.py
import glob
import pandas as pd
import time
from openai import OpenAI
import numpy as np
import re
import os
global  mean_score
from catboost import CatBoostClassifier

API_KEY = "NGNiZjk4NTAtZTdiZS00YTYwLTg5YTktZDYxOGFkMmZhZGVh.a24ed12f27388b64e98fd9f9d207dd21"

url = "https://foundation-models.api.cloud.ru/v1"

models_to_use = [
    "Qwen/Qwen3-235B-A22B-Instruct-2507",
    "GigaChat/GigaChat-2-Max",
    "Qwen/Qwen3-Next-80B-A3B-Instruct"
]

# –î–æ–±–∞–≤–ª—è–µ–º API_KEY –∏ timeout –≤ client_params
client_params = {
    "api_key": API_KEY, # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª—é—á
    "base_url": url,
    "timeout": 20 # <-- –¢–∞–π–º–∞—É—Ç 20 —Å–µ–∫—É–Ω–¥
}

generation_params = {
    "max_tokens": 10,
    "temperature": 0.3,
    "presence_penalty": 0,
    "top_p": 0.95,
}
# --- –ö–æ–Ω–µ—Ü –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---

def extract_number_from_response(response_text):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5 –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ LLM."""
    if response_text is None:
        print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—Ç–≤–µ—Ç LLM –ø—É—Å—Ç (None). –ò—Å–ø–æ–ª—å–∑—É–µ–º 3.")
        return 3

    match = re.search(r'\b([1-5])\b', str(response_text))
    if match:
        return int(match.group(1))
    print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞ '{response_text}'. –ò—Å–ø–æ–ª—å–∑—É–µ–º 3.")
    return 3

def query_llm_sync(model_name, prompt, client_params, generation_params):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–π LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5."""
    client = OpenAI(**client_params) # <-- –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        response = client.chat.completions.create(
            model=model_name,
            messages=[
                {
                    "role": "user",
                    "content": f"–û—Ü–µ–Ω–∏ —Ä–∏—Å–∫ –≥–∏–ø–æ–∫—Å–∏–∏ –ø–ª–æ–¥–∞ –ø–æ –∞–Ω–∞–º–Ω–µ–∑—É –ø–∞—Ü–∏–µ–Ω—Ç–∞. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5, –≥–¥–µ 1 ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫, 5 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫.\n\n–ê–Ω–∞–º–Ω–µ–∑: {prompt}"
                }
            ],
            **generation_params
        )
        answer_text = response.choices[0].message.content
        score = extract_number_from_response(answer_text)
        print(f"    –ú–æ–¥–µ–ª—å {model_name} –≤—ã–¥–∞–ª–∞: {answer_text.strip()} -> {score}")
        return score
    except Exception as e: # –õ–æ–≤–∏–º –≤—Å–µ –æ—à–∏–±–∫–∏, –≤–∫–ª—é—á–∞—è —Ç–∞–π–º–∞—É—Ç
        print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {model_name}: {e}")
        return 3

def diagnoz_analyze(file_paths, anamnesis):
    global mean_score
    #—É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è —Ñ–∏—á
    reset_accumulated_data()
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–º–Ω–µ–∑ —Å –ø–æ–º–æ—â—å—é 3 LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞ –≥–∏–ø–æ–∫—Å–∏–∏ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5).
    –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ 20 —Å–µ–∫—É–Ω–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 3.

    Args:
        file_paths: (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è) –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
        anamnesis: (str) –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∞–Ω–∞–º–Ω–µ–∑–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞.

    Returns:
        float: –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –≥–∏–ø–æ–∫—Å–∏–∏ –æ—Ç 1 –¥–æ 5.
    """
    print(f"–ê–Ω–∞–ª–∏–∑ –∞–Ω–∞–º–Ω–µ–∑–∞: {anamnesis}") # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    scores = []
    for model_name in models_to_use:
        score = query_llm_sync(model_name, str(anamnesis), client_params, generation_params)
        scores.append(score)
        time.sleep(0.1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    mean_score = np.mean(scores)
    print(f"–û—Ü–µ–Ω–∫–∏ –æ—Ç –º–æ–¥–µ–ª–µ–π {models_to_use}: {scores} -> –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {mean_score:.2f}") # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    #return mean_score  –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ (mean_score)



# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏
MODEL_PATH = 'final_catboost_model.cbm'
model = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—ë –æ–¥–∏–Ω —Ä–∞–∑

# –ü—É—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
TEMP_DIR = 'temp'
COMBINED_BPM_PATH = os.path.join(TEMP_DIR, 'combined_bpm.csv')
COMBINED_UTERUS_PATH = os.path.join(TEMP_DIR, 'combined_uterus.csv')


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def load_full_file(filepath):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–µ—Å—å CSV —Ñ–∞–π–ª."""
    try:
        df = pd.read_csv(filepath)
        return df
    except pd.errors.EmptyDataError:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª {filepath} –ø—É—Å—Ç.")
        return pd.DataFrame(columns=['time_sec', 'value'])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return pd.DataFrame(columns=['time_sec', 'value'])


def save_full_file(df, filepath):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ CSV —Ñ–∞–π–ª."""
    try:
        df.to_csv(filepath, index=False)
        # print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
        raise


def initialize_temp_files():
    """–°–æ–∑–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø—É—Å—Ç—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    if not os.path.exists(TEMP_DIR):
        os.makedirs(TEMP_DIR)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {TEMP_DIR}")

    # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—ã–µ
    if not os.path.exists(COMBINED_BPM_PATH):
        empty_df = pd.DataFrame(columns=['time_sec', 'value'])
        save_full_file(empty_df, COMBINED_BPM_PATH)
    if not os.path.exists(COMBINED_UTERUS_PATH):
        empty_df = pd.DataFrame(columns=['time_sec', 'value'])
        save_full_file(empty_df, COMBINED_UTERUS_PATH)


def calculate_features_for_combined_session(combined_bpm_df, combined_uterus_df):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∏—á–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    mean_bpm = std_bpm = mean_uterus = std_uterus = np.nan

    if not combined_bpm_df.empty:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ 'value' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if 'value' not in combined_bpm_df.columns:
            raise KeyError(f"–ö–æ–ª–æ–Ω–∫–∞ 'value' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ combined_bpm_df. –ö–æ–ª–æ–Ω–∫–∏: {list(combined_bpm_df.columns)}")
        mean_bpm = combined_bpm_df['value'].mean()
        std_bpm = combined_bpm_df['value'].std(ddof=1)  # ddof=1 –¥–ª—è –Ω–µ—Å–º–µ—â–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –°–ö–û

    if not combined_uterus_df.empty:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ 'value' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if 'value' not in combined_uterus_df.columns:
            raise KeyError(
                f"–ö–æ–ª–æ–Ω–∫–∞ 'value' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ combined_uterus_df. –ö–æ–ª–æ–Ω–∫–∏: {list(combined_uterus_df.columns)}")
        mean_uterus = combined_uterus_df['value'].mean()
        std_uterus = combined_uterus_df['value'].std(ddof=1)

    print(f"üßÆ –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ñ–∏—á–∏ –Ω–∞ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   mean_bpm: {mean_bpm:.2f}, std_bpm: {std_bpm:.2f}")
    print(f"   mean_uterus: {mean_uterus:.2f}, std_uterus: {std_uterus:.2f}")

    return mean_bpm, std_bpm, mean_uterus, std_uterus


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def analyze_data(file_paths):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ bpm_n.csv –∏ uterus_n.csv,
    –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö —Å —Ä–∞–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∏—á–∏
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ CatBoost.

    Args:
        file_paths (list): –°–ø–∏—Å–æ–∫ –∏–∑ –¥–≤—É—Ö –ø—É—Ç–µ–π: [–ø—É—Ç—å_–∫_bpm_n.csv, –ø—É—Ç—å_–∫_uterus_n.csv].

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞, –≤–∫–ª—é—á–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≥–∏–ø–æ–∫—Å–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
    """
    global mean_score, model

    # - 0. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ -
    initialize_temp_files()

    # - 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö -
    if not isinstance(file_paths, list) or len(file_paths) != 2:
        raise ValueError("file_paths –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∏–∑ –¥–≤—É—Ö –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º bpm –∏ uterus.")

    bpm_file_path, uterus_file_path = file_paths
    if not os.path.isfile(bpm_file_path):
        raise FileNotFoundError(f"–§–∞–π–ª bpm –Ω–µ –Ω–∞–π–¥–µ–Ω: {bpm_file_path}")
    if not os.path.isfile(uterus_file_path):
        raise FileNotFoundError(f"–§–∞–π–ª uterus –Ω–µ –Ω–∞–π–¥–µ–Ω: {uterus_file_path}")

    # - 2. –ü–æ–ª—É—á–µ–Ω–∏–µ mean_score -
    risk_level = mean_score
    if risk_level is None:
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: mean_score –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ 3.0.")
        risk_level = 3.0
    print(f"üìä analyze_data –∏—Å–ø–æ–ª—å–∑—É–µ—Ç mean_score (–∞–Ω–∞–º–Ω–µ–∑ LLM) = {risk_level}")

    # - 3. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–æ–¥–∏–Ω —Ä–∞–∑) -
    if model is None:
        if not os.path.exists(MODEL_PATH):
            raise FileNotFoundError(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {MODEL_PATH}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        try:
            model = CatBoostClassifier() # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –º–æ–¥–µ–ª—å
            model.load_model(MODEL_PATH) # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –≤–µ—Å–∞
            print(f"‚úÖ –ú–æ–¥–µ–ª—å CatBoost –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {MODEL_PATH}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            raise e

    # - 4. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ñ–∞–π–ª–æ–≤ -
    try:
        df_current_bpm = load_full_file(bpm_file_path)
        df_current_uterus = load_full_file(uterus_file_path)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã: {bpm_file_path}, {uterus_file_path}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—É—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}"
        print(error_msg)
        raise RuntimeError(error_msg)

    # - 5. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∏—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ï–ö–£–©–ï–ô –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤ (–¥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è) -
    try:
        mean_bpm_current = df_current_bpm['value'].mean()
        std_bpm_current = df_current_bpm['value'].std()
        mean_uterus_current = df_current_uterus['value'].mean()
        std_uterus_current = df_current_uterus['value'].std()
        print(f"üßÆ –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ñ–∏—á–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ —Ñ–∞–π–ª–æ–≤:")
        print(f" mean_bpm_current: {mean_bpm_current:.2f}, std_bpm_current: {std_bpm_current:.2f}")
        print(f" mean_uterus_current: {mean_uterus_current:.2f}, std_uterus_current: {std_uterus_current:.2f}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ñ–∏—á –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤: {e}"
        print(error_msg)
        raise RuntimeError(error_msg)

    # - 6. –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–Ω–µ–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö -
    try:
        df_combined_bpm = load_full_file(COMBINED_BPM_PATH)
        df_combined_uterus = load_full_file(COMBINED_UTERUS_PATH)
        print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–Ω–µ–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ {COMBINED_BPM_PATH} –∏ {COMBINED_UTERUS_PATH}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–Ω–µ–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}"
        print(error_msg)
        raise RuntimeError(error_msg)

    # - 7. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–Ω–µ–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–º–∏ (–∞–Ω–∞–ª–æ–≥ combine_with_existing_data) -
    try:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º bpm
        if not df_current_bpm.empty:
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ bpm —Ñ–∞–π–ª–∞
            time_offset_bpm = 0.0
            if not df_combined_bpm.empty:
                time_offset_bpm = df_combined_bpm['time_sec'].iloc[-1] if 'time_sec' in df_combined_bpm.columns and not df_combined_bpm.empty else 0.0
            df_current_bpm_copy = df_current_bpm.copy()
            df_current_bpm_copy['time_sec'] += time_offset_bpm
            df_new_combined_bpm = pd.concat([df_combined_bpm, df_current_bpm_copy], ignore_index=True)
        else:
            df_new_combined_bpm = df_combined_bpm # –û—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø—É—Å—Ç

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º uterus
        if not df_current_uterus.empty:
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ uterus —Ñ–∞–π–ª–∞
            time_offset_uterus = 0.0
            if not df_combined_uterus.empty:
                time_offset_uterus = df_combined_uterus['time_sec'].iloc[-1] if 'time_sec' in df_combined_uterus.columns and not df_combined_uterus.empty else 0.0
            df_current_uterus_copy = df_current_uterus.copy()
            df_current_uterus_copy['time_sec'] += time_offset_uterus
            df_new_combined_uterus = pd.concat([df_combined_uterus, df_current_uterus_copy], ignore_index=True)
        else:
            df_new_combined_uterus = df_combined_uterus # –û—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø—É—Å—Ç

        print(f"üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–Ω–µ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏.")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
        print(error_msg)
        raise RuntimeError(error_msg)

    # - 8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö -
    try:
        save_full_file(df_new_combined_bpm, COMBINED_BPM_PATH)
        save_full_file(df_new_combined_uterus, COMBINED_UTERUS_PATH)
        print(f"üíæ –ù–æ–≤—ã–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {COMBINED_BPM_PATH} –∏ {COMBINED_UTERUS_PATH}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}"
        print(error_msg)
        raise RuntimeError(error_msg)

    # - 9. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∏—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è CatBoost –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫) -
    try:
        mean_bpm, std_bpm, mean_uterus, std_uterus = calculate_features_for_combined_session(
            df_new_combined_bpm,
            df_new_combined_uterus
        )
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ñ–∏—á –∏–∑ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}"
        print(error_msg)
        raise RuntimeError(error_msg)

    # - 10. –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö) -
    data_for_prediction = pd.DataFrame({
        'mean_bpm': [mean_bpm],
        'std_bpm': [std_bpm],
        'mean_uterus': [mean_uterus],
        'std_uterus': [std_uterus], # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏
        'anamnesis_score': [risk_level] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π/–≥–ª–æ–±–∞–ª—å–Ω—ã–π mean_score
    })
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω DataFrame –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö):{data_for_prediction}")

    # - 11. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö) -
    try:
        # predict_proba –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ [[P(class=0), P(class=1)]]
        probability_of_hypoxia = model.predict_proba(data_for_prediction)[0][1] # –ë–µ—Ä–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1 (–≥–∏–ø–æ–∫—Å–∏—è)
        probability_percent = probability_of_hypoxia * 100
        print(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≥–∏–ø–æ–∫—Å–∏–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö): {probability_percent:.2f}%")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –º–æ–¥–µ–ª—å—é: {e}"
        print(error_msg)
        raise RuntimeError(error_msg)

    # - 12. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö) -
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", "–¥–∏–∞–≥–Ω–æ–∑—ã", "–ø—Ä–æ–≥–Ω–æ–∑—ã" –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏—á –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    deviations = []
    diagnoses = []
    forecasts = []

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
    if not np.isnan(mean_bpm):
        if mean_bpm > 180:
            # –¢—è–∂—ë–ª–∞—è —Ç–∞—Ö–∏–∫–∞—Ä–¥–∏—è
            deviations.append("–¢—è–∂—ë–ª–∞—è —Ç–∞—Ö–∏–∫–∞—Ä–¥–∏—è –ø–ª–æ–¥–∞ (–ß–°–° > 180 —É–¥/–º–∏–Ω)")

        elif mean_bpm < 100:
            # –¢—è–∂—ë–ª–∞—è –±—Ä–∞–¥–∏–∫–∞—Ä–¥–∏—è
            deviations.append("–¢—è–∂—ë–ª–∞—è –±—Ä–∞–¥–∏–∫–∞—Ä–¥–∏—è –ø–ª–æ–¥–∞ (–ß–°–° < 100 —É–¥/–º–∏–Ω)")


    if not np.isnan(std_bpm):
        if std_bpm < 5:
            # –ù–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
            deviations.append("–ù–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ß–°–° –ø–ª–æ–¥–∞ (< 5 —É–¥/–º–∏–Ω)")


    if not np.isnan(mean_uterus):
        if mean_uterus > 50:  # –ü–æ—Ä–æ–≥ —É—Å–ª–æ–≤–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–∞–Ω–Ω—ã—Ö
            # –í—ã—Å–æ–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–≥–∏–ø–µ—Ä—Ç–æ–Ω—É—Å?)
            deviations.append("–í—ã—Å–æ–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ç–∫–∏ (> 50 —É.–µ.)")


    # --- –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≥–∏–ø–æ–∫—Å–∏–∏ (probability_percent) ---
    if not np.isnan(probability_percent):  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º
        if probability_percent > 52:
            diagnoses.append(
                "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Ä–∞–∑–≤–∏—Ç–∏—è –≥–∏–ø–æ–∫—Å–∏–∏ –ø–ª–æ–¥–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30-60 –º–∏–Ω—É—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.")
        elif probability_percent > 20:
            diagnoses.append(
                "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –≥–∏–ø–æ–∫—Å–∏–∏ –ø–ª–æ–¥–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å–∏–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞.")
        else:
            diagnoses.append("–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –≥–∏–ø–æ–∫—Å–∏–∏ –ø–ª–æ–¥–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")

    # - 13. –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ -
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –õ–û–ö–ê–õ–¨–ù–´–ï —Ñ–∏—á–∏ –≤ all_metrics
    return {
        "deviations": deviations,
        "diagnoses": diagnoses,
        "forecasts": forecasts,
        "all_metrics": (
            f"–°—Ä–µ–¥–Ω—è—è –ß–°–° : {mean_bpm_current:.2f} —É–¥/–º–∏–Ω\n"
            f"–°–ö–û –ß–°–° : {std_bpm_current:.2f} —É–¥/–º–∏–Ω\n"
            f"–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ç–∫–∏ : {mean_uterus_current:.2f} —É.–µ.\n"
            f"–°–ö–û –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—Ç–∫–∏ : {std_uterus_current:.2f} —É.–µ.\n"
        ),
        "probability_percent": probability_percent # –ù–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    }


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) ---
def reset_accumulated_data():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —É–¥–∞–ª—è—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    try:
        if os.path.exists(COMBINED_BPM_PATH):
            os.remove(COMBINED_BPM_PATH)
            print(f"üóëÔ∏è  –£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {COMBINED_BPM_PATH}")
        if os.path.exists(COMBINED_UTERUS_PATH):
            os.remove(COMBINED_UTERUS_PATH)
            print(f"üóëÔ∏è  –£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {COMBINED_UTERUS_PATH}")
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É temp, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
        if os.path.exists(TEMP_DIR) and not os.listdir(TEMP_DIR):
            os.rmdir(TEMP_DIR)
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {TEMP_DIR}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

# --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ) ---
# if __name__ == "__main__":
#     # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, mean_score –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
#     global mean_score
#     mean_score = 4.2 # –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
#
#     # –°–±—Ä–æ—Å–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
#     reset_accumulated_data()
#
#     # –ü—É—Ç–∏ –∫ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ —Ñ–∞–π–ª–æ–≤
#     bpm_path_1 = 'path/to/bpm_1.csv'
#     uterus_path_1 = 'path/to/uterus_1.csv'
#     file_paths_1 = [bpm_path_1, uterus_path_1]
#
#     try:
#         print("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤ ---")
#         result_1 = analyze_data(file_paths_1)
#         print("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (1 –ø–∞—Ä–∞) ---")
#         for key, value in result_1.items():
#             print(f"{key}: {value}")
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã: {e}")
#
#     # –ü—É—Ç–∏ –∫–æ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–µ —Ñ–∞–π–ª–æ–≤
#     bpm_path_2 = 'path/to/bpm_2.csv'
#     uterus_path_2 = 'path/to/uterus_2.csv'
#     file_paths_2 = [bpm_path_2, uterus_path_2]
#
#     try:
#         print("\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤ ---")
#         result_2 = analyze_data(file_paths_2)
#         print("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (2 –ø–∞—Ä—ã) ---")
#         for key, value in result_2.items():
#             print(f"{key}: {value}")
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—ã: {e}")

