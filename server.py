from flask import Flask, request, jsonify
import os
import threading
import shutil
from analytics_module import analyze_data, diagnoz_analyze

app = Flask(__name__)

# ‚úÖ –î–≤–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
BPM_DIR = '/tmp/predictive_analytics_bpm'
UTERUS_DIR = '/tmp/predictive_analytics_uterus'
os.makedirs(BPM_DIR, exist_ok=True)
os.makedirs(UTERUS_DIR, exist_ok=True)

# ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–û
results_list = []  # ‚Üê –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ó–î–ï–°–¨, –í –ö–û–†–ù–ï
is_processing = False

@app.route('/api/diagnose', methods=['POST'])
def diagnose():
    data = request.get_json()
    anamnesis = data.get('anamnesis', '')

    try:
        result = diagnoz_analyze([], anamnesis)  # diagnoz_analyze –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ñ–∞–π–ª–æ–≤
        return jsonify(result)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ diagnoz_analyze: {e}")
        return jsonify({
            "deviations": [],
            "diagnoses": [],
            "forecasts": ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–Ω–∞–º–Ω–µ–∑–∞."],
            "all_metrics": f"–û—à–∏–±–∫–∞: {str(e)}"
        }), 500

@app.route('/api/analyze', methods=['POST'])
def analyze():
    global is_processing, results_list

    if 'bpm_files' not in request.files or 'uterus_files' not in request.files:
        return jsonify({'error': 'No files uploaded for bpm or uterus'}), 400

    bpm_files = request.files.getlist('bpm_files')
    uterus_files = request.files.getlist('uterus_files')

    if not bpm_files or not uterus_files:
        return jsonify({'error': 'No files selected for bpm or uterus'}), 400

    if len(bpm_files) != len(uterus_files):
        # ‚úÖ –£–î–ê–õ–Ø–ï–ú –í–°–ï –§–ê–ô–õ–´ –í –û–ë–ï–ò–• –ü–ê–ü–ö–ê–•
        for d in [BPM_DIR, UTERUS_DIR]:
            for f in os.listdir(d):
                os.remove(os.path.join(d, f))
        return jsonify({'error': f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: bpm = {len(bpm_files)}, uterus = {len(uterus_files)}'}), 400

    # ‚úÖ –û–ß–ò–©–ê–ï–ú –ü–ê–ü–ö–ò ‚Äî –ö–ê–ñ–î–ê–Ø –ù–û–í–ê–Ø –°–ï–°–°–ò–Ø
    for d in [BPM_DIR, UTERUS_DIR]:
        for f in os.listdir(d):
            os.remove(os.path.join(d, f))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏
    for file in bpm_files:
        if file.filename == '':
            continue
        filepath = os.path.join(BPM_DIR, file.filename)
        file.save(filepath)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª bpm: {filepath}")

    for file in uterus_files:
        if file.filename == '':
            continue
        filepath = os.path.join(UTERUS_DIR, file.filename)
        file.save(filepath)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª uterus: {filepath}")

    # ‚úÖ –û–ß–ò–©–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ï–î–´–î–£–©–ï–ô –°–ï–°–°–ò–ò
    results_list = []

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    if not is_processing:
        is_processing = True
        threading.Thread(target=process_files_background, daemon=True).start()

    return jsonify({
        "status": "received",
        "message": "–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...",
        "total_pairs": len(bpm_files)
    }), 200

def process_files_background():
    global is_processing, results_list

    bpm_files = sorted([f for f in os.listdir(BPM_DIR) if not f.startswith('.')])
    uterus_files = sorted([f for f in os.listdir(UTERUS_DIR) if not f.startswith('.')])

    if not bpm_files or not uterus_files or len(bpm_files) != len(uterus_files):
        print("‚ùå –ù–∞—Ä—É—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        is_processing = False
        return

    print(f"‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(bpm_files)} –ø–∞—Ä —Ñ–∞–π–ª–æ–≤...")

    for i in range(len(bpm_files)):
        bpm_file = bpm_files[i]
        uterus_file = uterus_files[i]
        bpm_path = os.path.join(BPM_DIR, bpm_file)
        uterus_path = os.path.join(UTERUS_DIR, uterus_file)

        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞—Ä—É {i+1}/{len(bpm_files)}: {bpm_file} –∏ {uterus_file}")

        try:
            result = analyze_data([bpm_path, uterus_path])
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze_data –¥–ª—è –ø–∞—Ä—ã {bpm_file} –∏ {uterus_file}: {e}")
            result = {
                "deviations": [f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"],
                "diagnoses": [],
                "forecasts": [],
                "all_metrics": "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö"
            }

        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –í –ì–õ–û–ë–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö
        results_list.append({
            "file_pair": f"{bpm_file} –∏ {uterus_file}",
            "result": result,
            "index": i + 1
        })

        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç #{i+1} –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ: {len(results_list)}")

    is_processing = False
    print("üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã.")

@app.route('/api/results', methods=['GET'])
def get_all_results():
    # ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ‚Äî –î–ê–ñ–ï –ï–°–õ–ò –ü–†–û–¶–ï–°–° –ù–ï –ó–ê–í–ï–†–®–Å–ù
    return jsonify({
        "results": results_list,
        "is_complete": not is_processing,
        "total_processed": len(results_list),
        "total_expected": len(results_list)
    }), 200

@app.route('/api/result/latest', methods=['GET'])
def get_latest_result():
    if not results_list:
        return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 404
    return jsonify(results_list[-1]["result"]), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)